from core.api.api_helper import RequestBuilder
from utilities.config_utils import ConfigUtils
import os
import json


class CommonUtils:
    request_builder= RequestBuilder()
    config_utils = ConfigUtils(os.getcwd())


    def is_responsevalid(self, pstr_reponse):
        """
            Description:
            	|  This method takes the Response Object as a Parameter.
            	|  It returns True or False based on the response status code.


            """
        int_status_code = self.request_builder.get_response_statuscode(pstr_reponse)
        if int_status_code == 200 or int_status_code == 201:
            return True
        else:
            return False


    def is_reponsegenerated(self, pobj_reponse):
        """
            :param pstr_reponse: Response generated by a call
            :type pstr_reponse: String

            :return: Boolean - This method returns True or False based on the response.
            """
        if  pobj_reponse == "":
            return False
        else:
            return True



    def springboard_get_authtoken(self):
        """
                    Description:
                    	|  This method login to the application
                    	| Takes input from config_api.yml
                    """
        str_username, str_password = self.config_utils.fetch_login_credentials(pstr_user_account_type="default_user")
        dict_service_disc = self.config_utils.get_servicedescription("springboard_description.yml", "login")

        str_request_url = dict_service_disc["target_url"] + dict_service_disc["endpoint"] + dict_service_disc[
            "queryparams"]
        headers = dict_service_disc["headers"]
        payload = "{" + "\"" + "email" + "\"" + ":" + "\"" + str_username + "\"" + ","+ "\"" + "password" + "\"" + ":" + "\"" + str_password + "\"" +"}"
        self.response = self.request_builder.call_request(dict_service_disc["method"], str_request_url,
                                                       headers, pstr_payload=payload)
        self.response_content = self.response.content
        bln_response1 = self.is_reponsegenerated(self.response)
        if bln_response1:
            bln_validate_response = self.is_responsevalid(self.response)
            if bln_validate_response:
                response_json = json.loads(self.response_content)
                str_token = response_json['token']
                return str_token
            else:
                print("Response not valid")
                return None
        else:
            print("Response Not Generated")
            return None
